// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "session" (
    token, username, expires_at
) VALUES (
    $1, $2, $3
)
RETURNING token, username, expires_at, created_at
`

type CreateSessionParams struct {
	Token     string
	Username  string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.Token, arg.Username, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Username,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const findSessionByToken = `-- name: FindSessionByToken :one
SELECT token, username, expires_at, created_at
FROM "session"
WHERE "session".token = $1
LIMIT 1
`

func (q *Queries) FindSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, findSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Username,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessionExpiresAt = `-- name: UpdateSessionExpiresAt :one
UPDATE "session"
SET expires_at = $1::timestamp
WHERE token = $2::text
RETURNING token, username, expires_at, created_at
`

type UpdateSessionExpiresAtParams struct {
	ExpiresAt pgtype.Timestamp
	Token     string
}

func (q *Queries) UpdateSessionExpiresAt(ctx context.Context, arg UpdateSessionExpiresAtParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionExpiresAt, arg.ExpiresAt, arg.Token)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Username,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
