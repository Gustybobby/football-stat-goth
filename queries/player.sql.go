// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: player.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO "player" (
    firstname,
    lastname,
    dob,
    height,
    nationality,
    position,
    image
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, firstname, lastname, dob, height, nationality, position, image
`

type CreatePlayerParams struct {
	Firstname   string
	Lastname    string
	Dob         pgtype.Timestamp
	Height      int16
	Nationality string
	Position    PlayerPosition
	Image       pgtype.Text
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
		arg.Height,
		arg.Nationality,
		arg.Position,
		arg.Image,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Height,
		&i.Nationality,
		&i.Position,
		&i.Image,
	)
	return i, err
}

const findPlayerIDByClubNoSeason = `-- name: FindPlayerIDByClubNoSeason :one
SELECT
    "club_player".player_id
FROM "club_player"
WHERE
    "club_player".club_id = $1 AND
    "club_player".no = $2 AND
    "club_player".season = $3
`

type FindPlayerIDByClubNoSeasonParams struct {
	ClubID string
	No     int16
	Season string
}

func (q *Queries) FindPlayerIDByClubNoSeason(ctx context.Context, arg FindPlayerIDByClubNoSeasonParams) (int32, error) {
	row := q.db.QueryRow(ctx, findPlayerIDByClubNoSeason, arg.ClubID, arg.No, arg.Season)
	var player_id int32
	err := row.Scan(&player_id)
	return player_id, err
}

const listPlayerInfosOrderByPosAsc = `-- name: ListPlayerInfosOrderByPosAsc :many
SELECT id, firstname, lastname, dob, height, nationality, position, image, club_id, player_id, season, no
FROM "player" inner join "club_player" on "player".id = "club_player".player_id
ORDER BY "player".position ASC
`

type ListPlayerInfosOrderByPosAscRow struct {
	ID          int32
	Firstname   string
	Lastname    string
	Dob         pgtype.Timestamp
	Height      int16
	Nationality string
	Position    PlayerPosition
	Image       pgtype.Text
	ClubID      string
	PlayerID    int32
	Season      string
	No          int16
}

func (q *Queries) ListPlayerInfosOrderByPosAsc(ctx context.Context) ([]ListPlayerInfosOrderByPosAscRow, error) {
	rows, err := q.db.Query(ctx, listPlayerInfosOrderByPosAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayerInfosOrderByPosAscRow
	for rows.Next() {
		var i ListPlayerInfosOrderByPosAscRow
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Dob,
			&i.Height,
			&i.Nationality,
			&i.Position,
			&i.Image,
			&i.ClubID,
			&i.PlayerID,
			&i.Season,
			&i.No,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
