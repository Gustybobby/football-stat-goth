// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: player.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO "player" (
    firstname,
    lastname,
    dob,
    height,
    nationality,
    position,
    image
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, firstname, lastname, dob, height, nationality, position, image
`

type CreatePlayerParams struct {
	Firstname   string
	Lastname    string
	Dob         pgtype.Timestamp
	Height      int16
	Nationality string
	Position    PlayerPosition
	Image       pgtype.Text
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer,
		arg.Firstname,
		arg.Lastname,
		arg.Dob,
		arg.Height,
		arg.Nationality,
		arg.Position,
		arg.Image,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Height,
		&i.Nationality,
		&i.Position,
		&i.Image,
	)
	return i, err
}

const findPlayerByID = `-- name: FindPlayerByID :one
SELECT id, firstname, lastname, dob, height, nationality, position, image
FROM "player"
WHERE "player".id = $1
LIMIT 1
`

func (q *Queries) FindPlayerByID(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRow(ctx, findPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Dob,
		&i.Height,
		&i.Nationality,
		&i.Position,
		&i.Image,
	)
	return i, err
}

const findPlayerIDByClubNoSeason = `-- name: FindPlayerIDByClubNoSeason :one
SELECT
    "club_player".player_id
FROM "club_player"
WHERE
    "club_player".club_id = $1 AND
    "club_player".no = $2 AND
    "club_player".season = $3
`

type FindPlayerIDByClubNoSeasonParams struct {
	ClubID string
	No     int16
	Season string
}

func (q *Queries) FindPlayerIDByClubNoSeason(ctx context.Context, arg FindPlayerIDByClubNoSeasonParams) (int32, error) {
	row := q.db.QueryRow(ctx, findPlayerIDByClubNoSeason, arg.ClubID, arg.No, arg.Season)
	var player_id int32
	err := row.Scan(&player_id)
	return player_id, err
}

const findPlayerSeasonPerformance = `-- name: FindPlayerSeasonPerformance :one
WITH "total_stats" AS (
    SELECT
        "player".id,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'GOAL' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_goals,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'GOAL' AND
                    "lineup_event".player_id2 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_assists,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'YELLOW' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_yellow_cards,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'RED' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_red_cards,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'OWN_GOAL' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_own_goals,
        (
            SELECT COUNT(*)
            FROM "match"
            WHERE EXISTS (
                SELECT 1
                FROM "lineup_player"
                WHERE
                    "lineup_player".player_id = "player".id AND (
                        "match".home_lineup_id = "lineup_player".lineup_id OR
                        "match".away_lineup_id = "lineup_player".lineup_id
                    )
            )
        ) AS appearances
    FROM "player"
    LEFT JOIN "lineup_event"
    ON
        "player".id = "lineup_event".player_id1 OR
        "player".id = "lineup_event".player_id2
    LEFT JOIN "match"
    ON
        "match".season = $2::TEXT AND (
            "lineup_event".lineup_id = "match".home_lineup_id OR
            "lineup_event".lineup_id = "match".away_lineup_id
        )
    GROUP BY "player".id
), "total_rank_stats" AS (
    SELECT
        total_stats.id, total_stats.total_goals, total_stats.total_assists, total_stats.total_yellow_cards, total_stats.total_red_cards, total_stats.total_own_goals, total_stats.appearances,
        $2::TEXT AS season,
        RANK() OVER (
            ORDER BY "total_stats".total_goals DESC
        ) AS goals_rank,
        RANK() OVER (
            ORDER BY "total_stats".total_assists DESC
        ) AS assists_rank
    FROM "total_stats"
)
SELECT id, total_goals, total_assists, total_yellow_cards, total_red_cards, total_own_goals, appearances, season, goals_rank, assists_rank
FROM "total_rank_stats"
WHERE "total_rank_stats".id = $1::INTEGER
`

type FindPlayerSeasonPerformanceParams struct {
	ID     int32
	Season string
}

type FindPlayerSeasonPerformanceRow struct {
	ID               int32
	TotalGoals       int64
	TotalAssists     int64
	TotalYellowCards int64
	TotalRedCards    int64
	TotalOwnGoals    int64
	Appearances      int64
	Season           string
	GoalsRank        int64
	AssistsRank      int64
}

func (q *Queries) FindPlayerSeasonPerformance(ctx context.Context, arg FindPlayerSeasonPerformanceParams) (FindPlayerSeasonPerformanceRow, error) {
	row := q.db.QueryRow(ctx, findPlayerSeasonPerformance, arg.ID, arg.Season)
	var i FindPlayerSeasonPerformanceRow
	err := row.Scan(
		&i.ID,
		&i.TotalGoals,
		&i.TotalAssists,
		&i.TotalYellowCards,
		&i.TotalRedCards,
		&i.TotalOwnGoals,
		&i.Appearances,
		&i.Season,
		&i.GoalsRank,
		&i.AssistsRank,
	)
	return i, err
}
