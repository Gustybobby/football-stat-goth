// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: match.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findLatestFinishedMatchweek = `-- name: FindLatestFinishedMatchweek :one
SELECT
    "match".week
FROM "match"
WHERE "match".is_finished = true
ORDER BY "match".start_at DESC
`

func (q *Queries) FindLatestFinishedMatchweek(ctx context.Context) (int16, error) {
	row := q.db.QueryRow(ctx, findLatestFinishedMatchweek)
	var week int16
	err := row.Scan(&week)
	return week, err
}

const findMatchByID = `-- name: FindMatchByID :one
SELECT
    match.id, match.home_lineup_id, match.away_lineup_id, match.season, match.week, match.location, match.start_at, match.is_finished,
    "home_club".id AS home_club_id,
    "home_club".short_name AS home_club_name,
    "home_club".logo AS home_club_logo,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE (
            "lineup_event"."event" = 'GOAL' AND
            "lineup_event".lineup_id = "match".home_lineup_id
        ) OR (
            "lineup_event"."event" = 'OWN_GOAL' AND
            "lineup_event".lineup_id = "match".away_lineup_id
        )
    ) AS home_goals,
    "home_lineup".possession AS home_possession,
    "home_lineup".shots_on_target AS home_shots_on_target,
    "home_lineup".shots AS home_shots,
    "home_lineup".touches AS home_touches,
    "home_lineup".passes AS home_passes,
    "home_lineup".tackles AS home_tackles,
    "home_lineup".clearances AS home_clearances,
    "home_lineup".corners AS home_corners,
    "home_lineup".offsides AS home_offsides,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE
            "lineup_event"."event" = 'YELLOW' AND
            "lineup_event".lineup_id = "match".home_lineup_id
    ) AS home_yellow_cards,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE
            "lineup_event"."event" = 'RED' AND
            "lineup_event".lineup_id = "match".home_lineup_id
    ) AS home_red_cards,
    "home_lineup".fouls_conceded AS home_fouls_conceded,
    "away_club".id AS away_club_id,
    "away_club".short_name AS away_club_name,
    "away_club".logo AS away_club_logo,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE (
            "lineup_event"."event" = 'GOAL' AND
            "lineup_event".lineup_id = "match".away_lineup_id
        ) OR (
            "lineup_event"."event" = 'OWN_GOAL' AND
            "lineup_event".lineup_id = "match".home_lineup_id
        )
    ) AS away_goals,
    "away_lineup".possession AS away_possession,
    "away_lineup".shots_on_target AS away_shots_on_target,
    "away_lineup".shots AS away_shots,
    "away_lineup".touches AS away_touches,
    "away_lineup".passes AS away_passes,
    "away_lineup".tackles AS away_tackles,
    "away_lineup".clearances AS away_clearances,
    "away_lineup".corners AS away_corners,
    "away_lineup".offsides AS away_offsides,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE
            "lineup_event"."event" = 'YELLOW' AND
            "lineup_event".lineup_id = "match".away_lineup_id
    ) AS away_yellow_cards,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE
            "lineup_event"."event" = 'RED' AND
            "lineup_event".lineup_id = "match".away_lineup_id
    ) AS away_red_cards,
    "away_lineup".fouls_conceded AS away_fouls_conceded
FROM "match"
INNER JOIN "lineup" as "home_lineup"
ON "match".home_lineup_id = "home_lineup".id
INNER JOIN "club" as "home_club"
ON "home_lineup".club_id = "home_club".id
INNER JOIN "lineup" as "away_lineup"
ON "match".away_lineup_id = "away_lineup".id
INNER JOIN "club" as "away_club"
ON "away_lineup".club_id = "away_club".id
WHERE "match".id = $1
LIMIT 1
`

type FindMatchByIDRow struct {
	ID                int32
	HomeLineupID      int32
	AwayLineupID      int32
	Season            string
	Week              int16
	Location          string
	StartAt           pgtype.Timestamp
	IsFinished        bool
	HomeClubID        string
	HomeClubName      string
	HomeClubLogo      string
	HomeGoals         int64
	HomePossession    pgtype.Numeric
	HomeShotsOnTarget int16
	HomeShots         int16
	HomeTouches       int16
	HomePasses        int16
	HomeTackles       int16
	HomeClearances    int16
	HomeCorners       int16
	HomeOffsides      int16
	HomeYellowCards   int64
	HomeRedCards      int64
	HomeFoulsConceded int16
	AwayClubID        string
	AwayClubName      string
	AwayClubLogo      string
	AwayGoals         int64
	AwayPossession    pgtype.Numeric
	AwayShotsOnTarget int16
	AwayShots         int16
	AwayTouches       int16
	AwayPasses        int16
	AwayTackles       int16
	AwayClearances    int16
	AwayCorners       int16
	AwayOffsides      int16
	AwayYellowCards   int64
	AwayRedCards      int64
	AwayFoulsConceded int16
}

func (q *Queries) FindMatchByID(ctx context.Context, id int32) (FindMatchByIDRow, error) {
	row := q.db.QueryRow(ctx, findMatchByID, id)
	var i FindMatchByIDRow
	err := row.Scan(
		&i.ID,
		&i.HomeLineupID,
		&i.AwayLineupID,
		&i.Season,
		&i.Week,
		&i.Location,
		&i.StartAt,
		&i.IsFinished,
		&i.HomeClubID,
		&i.HomeClubName,
		&i.HomeClubLogo,
		&i.HomeGoals,
		&i.HomePossession,
		&i.HomeShotsOnTarget,
		&i.HomeShots,
		&i.HomeTouches,
		&i.HomePasses,
		&i.HomeTackles,
		&i.HomeClearances,
		&i.HomeCorners,
		&i.HomeOffsides,
		&i.HomeYellowCards,
		&i.HomeRedCards,
		&i.HomeFoulsConceded,
		&i.AwayClubID,
		&i.AwayClubName,
		&i.AwayClubLogo,
		&i.AwayGoals,
		&i.AwayPossession,
		&i.AwayShotsOnTarget,
		&i.AwayShots,
		&i.AwayTouches,
		&i.AwayPasses,
		&i.AwayTackles,
		&i.AwayClearances,
		&i.AwayCorners,
		&i.AwayOffsides,
		&i.AwayYellowCards,
		&i.AwayRedCards,
		&i.AwayFoulsConceded,
	)
	return i, err
}

const findMatchIDFromLineupID = `-- name: FindMatchIDFromLineupID :one
SELECT
    "match".id
FROM "match"
WHERE
    "match".home_lineup_id = $1::integer OR
    "match".away_lineup_id = $1::integer
LIMIT 1
`

func (q *Queries) FindMatchIDFromLineupID(ctx context.Context, lineupID int32) (int32, error) {
	row := q.db.QueryRow(ctx, findMatchIDFromLineupID, lineupID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listClubStandings = `-- name: ListClubStandings :many
WITH "match_score" AS (
    SELECT
        "match".id,
        "home".club_id AS home_club_id,
        (
            SELECT COUNT(*)
            FROM "lineup_event"
            WHERE (
                "lineup_event"."event" = 'GOAL' AND
                "lineup_event".lineup_id = "match".home_lineup_id
            ) OR (
                "lineup_event"."event" = 'OWN_GOAL' AND
                "lineup_event".lineup_id = "match".away_lineup_id
            )
        ) AS home_goals,
        "away".club_id AS away_club_id,
        (
            SELECT COUNT(*)
            FROM "lineup_event"
            WHERE (
                "lineup_event"."event" = 'GOAL' AND
                "lineup_event".lineup_id = "match".away_lineup_id
            ) OR (
                "lineup_event"."event" = 'OWN_GOAL' AND
                "lineup_event".lineup_id = "match".home_lineup_id
            )
        ) AS away_goals,
        (
            SELECT COUNT(*)
            FROM "lineup_event"
            WHERE (
                "lineup_event"."event" = 'GOAL' AND
                "lineup_event".lineup_id = "match".home_lineup_id
            ) OR (
                "lineup_event"."event" = 'OWN_GOAL' AND
                "lineup_event".lineup_id = "match".away_lineup_id
            )
        ) - (
            SELECT COUNT(*)
            FROM "lineup_event"
            WHERE (
                "lineup_event"."event" = 'GOAL' AND
                "lineup_event".lineup_id = "match".away_lineup_id
            ) OR (
                "lineup_event"."event" = 'OWN_GOAL' AND
                "lineup_event".lineup_id = "match".home_lineup_id
            )
        ) AS goals_diff
    FROM "match"
    INNER JOIN "lineup" AS "home"
    ON "match".home_lineup_id = "home".id
    INNER JOIN "lineup" AS "away"
    ON "match".away_lineup_id = "away".id
    WHERE "match".is_finished = true
)
SELECT
    "club".id,
    "club".Name,
    "club".Logo,
    SUM("results".wins) AS won,
    SUM("results".draws) AS drawn,
    SUM("results".losses) AS lost,
    SUM("results".goals) AS gf,
    SUM("results".opp_goals) AS ga
FROM (
    SELECT
        "match_score".home_club_id AS club_id,
        SUM("match_score".home_goals) AS goals,
        SUM("match_score".away_goals) AS opp_goals,
        SUM(CASE WHEN "match_score".goals_diff > 0 THEN 1 ELSE 0 END) AS wins,
        SUM(CASE WHEN "match_score".goals_diff = 0 THEN 1 ELSE 0 END) AS draws,
        SUM(CASE WHEN "match_score".goals_diff < 0 THEN 1 ELSE 0 END ) AS losses
    FROM "match_score"
    GROUP BY home_club_id
    UNION ALL
    SELECT
        "match_score".away_club_id AS club_id,
        SUM("match_score".away_goals) AS goals,
        SUM("match_score".home_goals) AS opp_goals,
        SUM(CASE WHEN "match_score".goals_diff < 0 THEN 1 ELSE 0 END) AS wins,
        SUM(CASE WHEN "match_score".goals_diff = 0 THEN 1 ELSE 0 END) AS draws,
        SUM(CASE WHEN "match_score".goals_diff > 0 THEN 1 ELSE 0 END ) AS losses
    FROM "match_score"
    GROUP BY away_club_id
) AS "results"
INNER JOIN "club"
ON "results".club_id = club.id
GROUP BY "club".id
ORDER BY
    SUM("results".wins) * 3 + SUM("results".draws) * 1 + SUM("results".losses) * 0 DESC,
    SUM("results".goals) - SUM("results".opp_goals) DESC
`

type ListClubStandingsRow struct {
	ID    string
	Name  string
	Logo  string
	Won   int64
	Drawn int64
	Lost  int64
	Gf    int64
	Ga    int64
}

func (q *Queries) ListClubStandings(ctx context.Context) ([]ListClubStandingsRow, error) {
	rows, err := q.db.Query(ctx, listClubStandings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClubStandingsRow
	for rows.Next() {
		var i ListClubStandingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Logo,
			&i.Won,
			&i.Drawn,
			&i.Lost,
			&i.Gf,
			&i.Ga,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMatchesWithClubsAndGoals = `-- name: ListMatchesWithClubsAndGoals :many
SELECT
    match.id, match.home_lineup_id, match.away_lineup_id, match.season, match.week, match.location, match.start_at, match.is_finished,
    "home_club".id AS home_club_id,
    "home_club".logo AS home_club_logo,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE (
            "lineup_event"."event" = 'GOAL' AND
            "lineup_event".lineup_id = "match".home_lineup_id
        ) OR (
            "lineup_event"."event" = 'OWN_GOAL' AND
            "lineup_event".lineup_id = "match".away_lineup_id
        )
    ) AS home_goals,
    "away_club".id AS away_club_id,
    "away_club".logo AS away_club_logo,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE (
            "lineup_event"."event" = 'GOAL' AND
            "lineup_event".lineup_id = "match".away_lineup_id
        ) OR (
            "lineup_event"."event" = 'OWN_GOAL' AND
            "lineup_event".lineup_id = "match".home_lineup_id
        )
    ) AS away_goals
FROM "match"
INNER JOIN "lineup" as "home_lineup"
ON "match".home_lineup_id = "home_lineup".id
INNER JOIN "club" as "home_club"
ON "home_lineup".club_id = "home_club".id
INNER JOIN "lineup" as "away_lineup"
ON "match".away_lineup_id = "away_lineup".id
INNER JOIN "club" as "away_club"
ON "away_lineup".club_id = "away_club".id
WHERE
    is_finished = $1::bool AND
    CASE
        WHEN $2::bool
        THEN
            "home_club".id = $3::TEXT OR
            "away_club".id = $3::TEXT
        ELSE true
    END AND
    CASE
        WHEN $4::bool
        THEN "match".week = $5::INTEGER
        ELSE true
    END
ORDER BY
    CASE WHEN $6::TEXT = 'ASC' THEN "match".start_at END ASC,
    CASE WHEN $6::TEXT = 'DESC' THEN "match".start_at END DESC
`

type ListMatchesWithClubsAndGoalsParams struct {
	IsFinished   bool
	FilterClubID bool
	ClubID       string
	FilterWeek   bool
	Week         int32
	Order        string
}

type ListMatchesWithClubsAndGoalsRow struct {
	ID           int32
	HomeLineupID int32
	AwayLineupID int32
	Season       string
	Week         int16
	Location     string
	StartAt      pgtype.Timestamp
	IsFinished   bool
	HomeClubID   string
	HomeClubLogo string
	HomeGoals    int64
	AwayClubID   string
	AwayClubLogo string
	AwayGoals    int64
}

func (q *Queries) ListMatchesWithClubsAndGoals(ctx context.Context, arg ListMatchesWithClubsAndGoalsParams) ([]ListMatchesWithClubsAndGoalsRow, error) {
	rows, err := q.db.Query(ctx, listMatchesWithClubsAndGoals,
		arg.IsFinished,
		arg.FilterClubID,
		arg.ClubID,
		arg.FilterWeek,
		arg.Week,
		arg.Order,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMatchesWithClubsAndGoalsRow
	for rows.Next() {
		var i ListMatchesWithClubsAndGoalsRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeLineupID,
			&i.AwayLineupID,
			&i.Season,
			&i.Week,
			&i.Location,
			&i.StartAt,
			&i.IsFinished,
			&i.HomeClubID,
			&i.HomeClubLogo,
			&i.HomeGoals,
			&i.AwayClubID,
			&i.AwayClubLogo,
			&i.AwayGoals,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayerMatchHistory = `-- name: ListPlayerMatchHistory :many
SELECT
    match.id, match.home_lineup_id, match.away_lineup_id, match.season, match.week, match.location, match.start_at, match.is_finished,
    "home_club".id AS home_club_id,
    "home_club".logo AS home_club_logo,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE (
            "lineup_event"."event" = 'GOAL' AND
            "lineup_event".lineup_id = "match".home_lineup_id
        ) OR (
            "lineup_event"."event" = 'OWN_GOAL' AND
            "lineup_event".lineup_id = "match".away_lineup_id
        )
    ) AS home_goals,
    "away_club".id AS away_club_id,
    "away_club".logo AS away_club_logo,
    (
        SELECT COUNT(*)
        FROM "lineup_event"
        WHERE (
            "lineup_event"."event" = 'GOAL' AND
            "lineup_event".lineup_id = "match".away_lineup_id
        ) OR (
            "lineup_event"."event" = 'OWN_GOAL' AND
            "lineup_event".lineup_id = "match".home_lineup_id
        )
    ) AS away_goals,
    "lineup_player".position AS player_position,
    "lineup_player".no AS player_no
FROM "match"
INNER JOIN "lineup" as "home_lineup"
ON "match".home_lineup_id = "home_lineup".id
INNER JOIN "club" as "home_club"
ON "home_lineup".club_id = "home_club".id
INNER JOIN "lineup" as "away_lineup"
ON "match".away_lineup_id = "away_lineup".id
INNER JOIN "club" as "away_club"
ON "away_lineup".club_id = "away_club".id
INNER JOIN "lineup_player"
ON "lineup_player".player_id = $1::INTEGER AND (
    "lineup_player".lineup_id = "home_lineup".id OR
    "lineup_player".lineup_id = "away_lineup".id
)
WHERE is_finished = true
ORDER BY "match".start_at DESC
`

type ListPlayerMatchHistoryRow struct {
	ID             int32
	HomeLineupID   int32
	AwayLineupID   int32
	Season         string
	Week           int16
	Location       string
	StartAt        pgtype.Timestamp
	IsFinished     bool
	HomeClubID     string
	HomeClubLogo   string
	HomeGoals      int64
	AwayClubID     string
	AwayClubLogo   string
	AwayGoals      int64
	PlayerPosition PlayerPosition
	PlayerNo       int16
}

func (q *Queries) ListPlayerMatchHistory(ctx context.Context, playerID int32) ([]ListPlayerMatchHistoryRow, error) {
	rows, err := q.db.Query(ctx, listPlayerMatchHistory, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayerMatchHistoryRow
	for rows.Next() {
		var i ListPlayerMatchHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeLineupID,
			&i.AwayLineupID,
			&i.Season,
			&i.Week,
			&i.Location,
			&i.StartAt,
			&i.IsFinished,
			&i.HomeClubID,
			&i.HomeClubLogo,
			&i.HomeGoals,
			&i.AwayClubID,
			&i.AwayClubLogo,
			&i.AwayGoals,
			&i.PlayerPosition,
			&i.PlayerNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
