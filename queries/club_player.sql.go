// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: club_player.sql

package queries

import (
	"context"
)

const listClubPlayerByPlayerID = `-- name: ListClubPlayerByPlayerID :many
SELECT
    club_player.club_id, club_player.player_id, club_player.season, club_player.no,
    "club".short_name AS club_short_name,
    "club".logo AS club_logo
FROM "club_player"
INNER JOIN "club"
ON "club_player".club_id = "club".id
WHERE "club_player".player_id = $1
ORDER BY CAST(
    SPLIT_PART("club_player".season,'/',1) AS INTEGER
) DESC
`

type ListClubPlayerByPlayerIDRow struct {
	ClubID        string
	PlayerID      int32
	Season        string
	No            int16
	ClubShortName string
	ClubLogo      string
}

func (q *Queries) ListClubPlayerByPlayerID(ctx context.Context, playerID int32) ([]ListClubPlayerByPlayerIDRow, error) {
	rows, err := q.db.Query(ctx, listClubPlayerByPlayerID, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClubPlayerByPlayerIDRow
	for rows.Next() {
		var i ListClubPlayerByPlayerIDRow
		if err := rows.Scan(
			&i.ClubID,
			&i.PlayerID,
			&i.Season,
			&i.No,
			&i.ClubShortName,
			&i.ClubLogo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
