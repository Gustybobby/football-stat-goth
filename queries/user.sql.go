// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    username, password_hash, firstname, lastname
) VALUES (
    $1, $2, $3, $4
)
RETURNING username, password_hash, firstname, lastname, role
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Firstname    string
	Lastname     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Firstname,
		arg.Lastname,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.PasswordHash,
		&i.Firstname,
		&i.Lastname,
		&i.Role,
	)
	return i, err
}

const findPasswordHashByUsername = `-- name: FindPasswordHashByUsername :one
SELECT
    "user".password_hash
FROM "user"
WHERE "user".username = $1
LIMIT 1
`

func (q *Queries) FindPasswordHashByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, findPasswordHashByUsername, username)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT
    "user".username,
    "user".firstname,
    "user".lastname,
    "user".role
FROM "user"
WHERE "user".username = $1
LIMIT 1
`

type FindUserByUsernameRow struct {
	Username  string
	Firstname string
	Lastname  string
	Role      UserRole
}

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (FindUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, username)
	var i FindUserByUsernameRow
	err := row.Scan(
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Role,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    "user".username,
    "user".firstname,
    "user".lastname,
    "user".role
FROM "user"
ORDER BY
    "user".username ASC,
    "user".role ASC
`

type ListUsersRow struct {
	Username  string
	Firstname string
	Lastname  string
	Role      UserRole
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePasswordByUsername = `-- name: UpdatePasswordByUsername :exec
UPDATE 
    "user" 
SET password_hash = $2
WHERE "user".username = $1
`

type UpdatePasswordByUsernameParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) UpdatePasswordByUsername(ctx context.Context, arg UpdatePasswordByUsernameParams) error {
	_, err := q.db.Exec(ctx, updatePasswordByUsername, arg.Username, arg.PasswordHash)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user" SET
    firstname = COALESCE($2::TEXT, firstname),
    lastname = COALESCE($3::TEXT, lastname)
WHERE "user".username = $1
`

type UpdateUserParams struct {
	Username  string
	Firstname pgtype.Text
	Lastname  pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Username, arg.Firstname, arg.Lastname)
	return err
}
