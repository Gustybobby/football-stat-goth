// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package queries

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    username, password_hash, firstname, lastname
) VALUES (
    $1, $2, $3, $4
)
RETURNING username, password_hash, firstname, lastname, role
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Firstname    string
	Lastname     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Firstname,
		arg.Lastname,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.PasswordHash,
		&i.Firstname,
		&i.Lastname,
		&i.Role,
	)
	return i, err
}

const findPasswordHashByUsername = `-- name: FindPasswordHashByUsername :one
SELECT
    "user".password_hash
FROM "user"
WHERE "user".username = $1
LIMIT 1
`

func (q *Queries) FindPasswordHashByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, findPasswordHashByUsername, username)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT
    "user".username,
    "user".firstname,
    "user".lastname,
    "user".role
FROM "user"
WHERE "user".username = $1
LIMIT 1
`

type FindUserByUsernameRow struct {
	Username  string
	Firstname string
	Lastname  string
	Role      UserRole
}

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (FindUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, username)
	var i FindUserByUsernameRow
	err := row.Scan(
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Role,
	)
	return i, err
}
