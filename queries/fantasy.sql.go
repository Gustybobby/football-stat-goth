// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fantasy.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFantasy_PlayerInfoForFantasy = `-- name: GetFantasy_PlayerInfoForFantasy :many
SELECT "player".lastname, "player".position, "player".image, "club".id as club_id, "fantasy_player".cost, "fantasy_player".points, "fantasy_player".rating
FROM "fantasy_player" 
JOIN "player" on "fantasy_player".player_id = "player".id
JOIN "club" on "fantasy_player".club_id = "club".id
ORDER BY "player".position ASC, "player".lastname ASC
`

type GetFantasy_PlayerInfoForFantasyRow struct {
	Lastname string
	Position PlayerPosition
	Image    pgtype.Text
	ClubID   string
	Cost     int32
	Points   pgtype.Int4
	Rating   pgtype.Int4
}

func (q *Queries) GetFantasy_PlayerInfoForFantasy(ctx context.Context) ([]GetFantasy_PlayerInfoForFantasyRow, error) {
	rows, err := q.db.Query(ctx, getFantasy_PlayerInfoForFantasy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFantasy_PlayerInfoForFantasyRow
	for rows.Next() {
		var i GetFantasy_PlayerInfoForFantasyRow
		if err := rows.Scan(
			&i.Lastname,
			&i.Position,
			&i.Image,
			&i.ClubID,
			&i.Cost,
			&i.Points,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
