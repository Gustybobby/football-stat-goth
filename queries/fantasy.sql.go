// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fantasy.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countFantasyTeamPlayersByFantasyTeamID = `-- name: CountFantasyTeamPlayersByFantasyTeamID :one
SELECT
    COUNT(CASE WHEN "player".position = 'GK' THEN 1 ELSE NULL END) AS GK_count,
    COUNT(CASE WHEN "player".position = 'DEF' THEN 1 ELSE NULL END) AS DEF_count,
    COUNT(CASE WHEN "player".position = 'MFD' THEN 1 ELSE NULL END) AS MFD_count,
    COUNT(CASE WHEN "player".position = 'FWD' THEN 1 ELSE NULL END) AS FWD_count
FROM "fantasy_team_player"
INNER JOIN "fantasy_player"
ON "fantasy_team_player".fantasy_player_id = "fantasy_player".id
INNER JOIN "player"
ON "fantasy_player".player_id = "player".id
WHERE "fantasy_team_player".fantasy_team_id = $1
`

type CountFantasyTeamPlayersByFantasyTeamIDRow struct {
	GkCount  int64
	DefCount int64
	MfdCount int64
	FwdCount int64
}

func (q *Queries) CountFantasyTeamPlayersByFantasyTeamID(ctx context.Context, fantasyTeamID int32) (CountFantasyTeamPlayersByFantasyTeamIDRow, error) {
	row := q.db.QueryRow(ctx, countFantasyTeamPlayersByFantasyTeamID, fantasyTeamID)
	var i CountFantasyTeamPlayersByFantasyTeamIDRow
	err := row.Scan(
		&i.GkCount,
		&i.DefCount,
		&i.MfdCount,
		&i.FwdCount,
	)
	return i, err
}

const createFantasyTeam = `-- name: CreateFantasyTeam :one
INSERT INTO "fantasy_team" (
    username,
    season,
    budget
) VALUES (
    $1,
    $2,
    $3
)
RETURNING id, username, season, budget
`

type CreateFantasyTeamParams struct {
	Username string
	Season   string
	Budget   int32
}

func (q *Queries) CreateFantasyTeam(ctx context.Context, arg CreateFantasyTeamParams) (FantasyTeam, error) {
	row := q.db.QueryRow(ctx, createFantasyTeam, arg.Username, arg.Season, arg.Budget)
	var i FantasyTeam
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Season,
		&i.Budget,
	)
	return i, err
}

type CreateFantasyTransactionParams struct {
	Cost            int32
	Type            FantasyTransactionType
	FantasyTeamID   int32
	FantasyPlayerID int32
}

const findFantasyTeamByUsernameSeason = `-- name: FindFantasyTeamByUsernameSeason :one
SELECT id, username, season, budget
FROM "fantasy_team"
WHERE
    "fantasy_team".username = $1 AND
    "fantasy_team".season = $2
LIMIT 1
`

type FindFantasyTeamByUsernameSeasonParams struct {
	Username string
	Season   string
}

func (q *Queries) FindFantasyTeamByUsernameSeason(ctx context.Context, arg FindFantasyTeamByUsernameSeasonParams) (FantasyTeam, error) {
	row := q.db.QueryRow(ctx, findFantasyTeamByUsernameSeason, arg.Username, arg.Season)
	var i FantasyTeam
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Season,
		&i.Budget,
	)
	return i, err
}

const findLastestTransaction = `-- name: FindLastestTransaction :one
SELECT id, created_at, cost, type, fantasy_team_id, fantasy_player_id
FROM "fantasy_transaction"
WHERE
    "fantasy_transaction".fantasy_team_id = $1 AND
    "fantasy_transaction".fantasy_player_id = $2
ORDER BY "fantasy_transaction".created_at DESC
LIMIT 1
`

type FindLastestTransactionParams struct {
	FantasyTeamID   int32
	FantasyPlayerID int32
}

func (q *Queries) FindLastestTransaction(ctx context.Context, arg FindLastestTransactionParams) (FantasyTransaction, error) {
	row := q.db.QueryRow(ctx, findLastestTransaction, arg.FantasyTeamID, arg.FantasyPlayerID)
	var i FantasyTransaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Cost,
		&i.Type,
		&i.FantasyTeamID,
		&i.FantasyPlayerID,
	)
	return i, err
}

const listFantasyPlayers = `-- name: ListFantasyPlayers :many
WITH "player_total_stats" AS (
    SELECT
        "player".id,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'GOAL' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_goals,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'GOAL' AND
                    "lineup_event".player_id2 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_assists,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'YELLOW' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_yellow_cards,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'RED' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_red_cards,
        COUNT(
            CASE
                WHEN
                    "lineup_event".event = 'OWN_GOAL' AND
                    "lineup_event".player_id1 = "player".id
                THEN 1 ELSE NULL
            END
        ) AS total_own_goals,
        COUNT(DISTINCT "lineup_player".lineup_id) AS appearances,
        CASE
            WHEN "player".position = 'GK' THEN (
                SELECT
                    COUNT(
                        CASE
                            WHEN EXISTS (
                                SELECT 1
                                FROM "lineup_player"
                                WHERE
                                    "lineup_player".player_id = "player".id AND
                                    "lineup_player".lineup_id = "match".home_lineup_id
                            ) THEN
                                CASE
                                    WHEN EXISTS (
                                        SELECT 1
                                        FROM "lineup_event"
                                        WHERE (
                                            "lineup_event".event = 'GOAL' AND
                                            "lineup_event".lineup_id = "match".away_lineup_id
                                        ) OR (
                                            "lineup_event".event = 'OWN_GOAL' AND
                                            "lineup_event".lineup_id = "match".home_lineup_id
                                        )
                                    ) THEN NULL ELSE 1
                                END
                            ELSE
                                CASE
                                    WHEN EXISTS (
                                        SELECT 1
                                        FROM "lineup_event"
                                        WHERE (
                                            "lineup_event".event = 'GOAL' AND
                                            "lineup_event".lineup_id = "match".home_lineup_id
                                        ) OR (
                                            "lineup_event".event = 'OWN_GOAL' AND
                                            "lineup_event".lineup_id = "match".away_lineup_id
                                        )
                                    ) THEN NULL ELSE 1
                                END
                        END
                    )
                FROM "match"
                WHERE EXISTS (
                    SELECT 1
                    FROM "lineup_player"
                    WHERE
                        "lineup_player".player_id = "player".id AND (
                            "lineup_player".lineup_id = "match".home_lineup_id OR
                            "lineup_player".lineup_id = "match".away_lineup_id
                        ) AND "lineup_player".position = 'GK'
                    )
            )
            ELSE 0
        END AS clean_sheets
    FROM "player"
    LEFT JOIN "lineup_player"
    ON "player".id = "lineup_player".player_id
    LEFT JOIN "lineup_event"
    ON
        "lineup_player".lineup_id = "lineup_event".lineup_id AND (
            "lineup_player".player_id = "lineup_event".player_id1 OR
            "lineup_player".player_id = "lineup_event".player_id2
        )
    LEFT JOIN "match"
    ON
        "lineup_player".lineup_id = "match".home_lineup_id OR
        "lineup_player".lineup_id = "match".away_lineup_id
    WHERE "match".season = $5::TEXT
    GROUP BY "player".id
), "player_ranked_total_stats" AS (
    SELECT
        player_total_stats.id, player_total_stats.total_goals, player_total_stats.total_assists, player_total_stats.total_yellow_cards, player_total_stats.total_red_cards, player_total_stats.total_own_goals, player_total_stats.appearances, player_total_stats.clean_sheets,
        RANK() OVER (
            ORDER BY "player_total_stats".total_goals DESC
        ) AS goals_rank,
        RANK() OVER (
            ORDER BY "player_total_stats".total_assists DESC
        ) AS assists_rank,
        RANK() OVER (
            ORDER BY (
                "player_total_stats".total_goals +
                "player_total_stats".clean_sheets +
                "player_total_stats".total_assists * 0.75 
            ) ASC
        ) AS fantasy_rev_rank
    FROM "player_total_stats"
), "rank_stats" AS (
    SELECT
        SUM("player_ranked_total_stats".fantasy_rev_rank)/COUNT(*) AS rank_count_ratio,
        CAST(MAX("player_ranked_total_stats".fantasy_rev_rank) AS INTEGER) AS max_rank
    FROM "player_ranked_total_stats"
)
SELECT
    "fantasy_player".id,
    "player".id AS player_id,
    "player".firstname,
    "player".lastname,
    "player".position,
    "player".image,
    "club".id AS club_id,
    (
        SELECT
            CAST(
                ROUND(
                    $1::INTEGER + (
                        ($2::INTEGER - $1::INTEGER) /
                        ("rank_stats".rank_count_ratio - 1)
                    ) * ("player_ranked_total_stats".fantasy_rev_rank - 1)
                ) AS INTEGER
            )
        FROM "rank_stats"
        INNER JOIN "player_ranked_total_stats"
        ON "player_ranked_total_stats".id = "player".id
    ) AS cost
FROM "fantasy_player" 
INNER JOIN "player"
ON "fantasy_player".player_id = "player".id
INNER JOIN "club"
ON "fantasy_player".club_id = "club".id
WHERE
    CASE
        WHEN $3::bool
        THEN "fantasy_player".id = ANY($4::INTEGER[])
        ELSE true
    END
ORDER BY
    "player".position ASC,
    "player".lastname ASC
`

type ListFantasyPlayersParams struct {
	MinCost               int32
	AvgCost               int32
	FilterFantasyPlayerID bool
	FantasyPlayerIds      []int32
	Season                string
}

type ListFantasyPlayersRow struct {
	ID        int32
	PlayerID  int32
	Firstname string
	Lastname  string
	Position  PlayerPosition
	Image     pgtype.Text
	ClubID    string
	Cost      int32
}

func (q *Queries) ListFantasyPlayers(ctx context.Context, arg ListFantasyPlayersParams) ([]ListFantasyPlayersRow, error) {
	rows, err := q.db.Query(ctx, listFantasyPlayers,
		arg.MinCost,
		arg.AvgCost,
		arg.FilterFantasyPlayerID,
		arg.FantasyPlayerIds,
		arg.Season,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFantasyPlayersRow
	for rows.Next() {
		var i ListFantasyPlayersRow
		if err := rows.Scan(
			&i.ID,
			&i.PlayerID,
			&i.Firstname,
			&i.Lastname,
			&i.Position,
			&i.Image,
			&i.ClubID,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFantasyTeamPlayersByFantasyTeamID = `-- name: ListFantasyTeamPlayersByFantasyTeamID :many
SELECT fantasy_team_id, fantasy_player_id
FROM "fantasy_team_player"
WHERE "fantasy_team_player".fantasy_team_id = $1
`

func (q *Queries) ListFantasyTeamPlayersByFantasyTeamID(ctx context.Context, fantasyTeamID int32) ([]FantasyTeamPlayer, error) {
	rows, err := q.db.Query(ctx, listFantasyTeamPlayersByFantasyTeamID, fantasyTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FantasyTeamPlayer
	for rows.Next() {
		var i FantasyTeamPlayer
		if err := rows.Scan(&i.FantasyTeamID, &i.FantasyPlayerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
