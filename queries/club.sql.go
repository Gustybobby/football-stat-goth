// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: club.sql

package queries

import (
	"context"
)

const clubAverageStatistics = `-- name: ClubAverageStatistics :one
SELECT
    AVG("lineup".possession) AS avg_possession,
    AVG("lineup".shots_on_target) AS avg_shots_on_target,
    AVG("lineup".shots) AS avg_shots,
    AVG("lineup".touches) AS avg_touches,
    AVG("lineup".passes) AS avg_passes,
    AVG("lineup".tackles) AS avg_tackles,
    AVG("lineup".clearances) AS avg_clearances,
     AVG("lineup".corners) AS avg_corners,
    AVG("lineup".offsides) AS avg_offsides,
    AVG("lineup".fouls_conceded) AS avg_fouls_conceded
FROM "lineup"
INNER JOIN "match"
ON "match".is_finished AND ("match".home_lineup_id = "lineup".id OR "match".away_lineup_id = "lineup".id)
WHERE "lineup".club_id = $1::text
`

type ClubAverageStatisticsRow struct {
	AvgPossession    float64
	AvgShotsOnTarget float64
	AvgShots         float64
	AvgTouches       float64
	AvgPasses        float64
	AvgTackles       float64
	AvgClearances    float64
	AvgCorners       float64
	AvgOffsides      float64
	AvgFoulsConceded float64
}

func (q *Queries) ClubAverageStatistics(ctx context.Context, clubID string) (ClubAverageStatisticsRow, error) {
	row := q.db.QueryRow(ctx, clubAverageStatistics, clubID)
	var i ClubAverageStatisticsRow
	err := row.Scan(
		&i.AvgPossession,
		&i.AvgShotsOnTarget,
		&i.AvgShots,
		&i.AvgTouches,
		&i.AvgPasses,
		&i.AvgTackles,
		&i.AvgClearances,
		&i.AvgCorners,
		&i.AvgOffsides,
		&i.AvgFoulsConceded,
	)
	return i, err
}

const findClubByID = `-- name: FindClubByID :one
SELECT id, name, short_name, stadium, logo, est
FROM "club"
WHERE "club".id = $1
LIMIT 1
`

func (q *Queries) FindClubByID(ctx context.Context, id string) (Club, error) {
	row := q.db.QueryRow(ctx, findClubByID, id)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.Stadium,
		&i.Logo,
		&i.Est,
	)
	return i, err
}

const listClubsOrderByNameAsc = `-- name: ListClubsOrderByNameAsc :many
SELECT id, name, short_name, stadium, logo, est
FROM "club"
ORDER BY "club".name ASC
`

func (q *Queries) ListClubsOrderByNameAsc(ctx context.Context) ([]Club, error) {
	rows, err := q.db.Query(ctx, listClubsOrderByNameAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.Stadium,
			&i.Logo,
			&i.Est,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
