// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: club.sql

package queries

import (
	"context"
)

const findClubByID = `-- name: FindClubByID :one
SELECT id, name, stadium, logo, est
FROM "club"
WHERE "club".id = $1
LIMIT 1
`

func (q *Queries) FindClubByID(ctx context.Context, id string) (Club, error) {
	row := q.db.QueryRow(ctx, findClubByID, id)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Stadium,
		&i.Logo,
		&i.Est,
	)
	return i, err
}

const listClubsOrderByNameAsc = `-- name: ListClubsOrderByNameAsc :many
SELECT id, name, stadium, logo, est
FROM "club"
ORDER BY "club".name ASC
`

func (q *Queries) ListClubsOrderByNameAsc(ctx context.Context) ([]Club, error) {
	rows, err := q.db.Query(ctx, listClubsOrderByNameAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Stadium,
			&i.Logo,
			&i.Est,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
