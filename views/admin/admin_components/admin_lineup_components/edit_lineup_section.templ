package admin_lineup_components

import (
	"football-stat-goth/queries"
	"strconv"
)

type AddLineupPlayerParams struct {
	ClubID        string
	ClubName      string
	LineupID      int32
	LineupPlayers []queries.ListLineupPlayersByLineupIDRow
	Mirror        bool
}

templ EditLineupSection(params AddLineupPlayerParams) {
	<section class="rounded-lg border border-primary shadow-lg w-full p-4">
		<h1 class="text-2xl font-bold mb-4">{ params.ClubName }</h1>
		<div class="grid grid-cols-2 gap-4">
			<div>
				<div class="space-y-4" id={ "add_player_" + params.ClubID }></div>
				<div class="space-y-4" id={ "edit_player_" + strconv.Itoa(int(params.LineupID)) }></div>
			</div>
			@PositionButtonGroup(params)
		</div>
	</section>
}

templ PositionButtonGroup(params AddLineupPlayerParams) {
	<div
		class="flex flex-col space-y-4"
		id={ "position_button_group_" + params.ClubID }
		hx-swap-oob={ "#" + "position_button_group_" + params.ClubID }
	>
		for i := range(5) {
			<div class="flex items-center space-x-4 justify-center">
				if (!params.Mirror && i == 0) || (params.Mirror && i == 4) {
					if isPositionNoExist(0, params.LineupPlayers) {
						<button
							class="size-12 rounded-full text-center bg-primary text-secondary-background text-xl font-bold"
							hx-get={ buttonHxGet(0, params, "edit") }
							hx-swap="none"
						>
							{ strconv.Itoa(int(FindLineupPlayerByPositionNo(0, params.LineupPlayers).No)) }
						</button>
					} else {
						<button
							class="size-12 rounded-full text-center bg-secondary text-primary-background text-xl font-bold hover:bg-secondary-background"
							hx-get={ buttonHxGet(0, params, "add") }
							hx-swap="none"
						>
							+0
						</button>
					}
				} else {
					for j := range(5) {
						if isPositionNoExist(FindPositionNoFromIndex(i,j,params.Mirror), params.LineupPlayers) {
							<button
								class="size-12 rounded-full text-center bg-primary text-secondary-background text-xl font-bold"
								hx-get={ buttonHxGet(FindPositionNoFromIndex(i, j, params.Mirror), params, "edit") }
								hx-swap="none"
							>
								{ strconv.Itoa(int(FindLineupPlayerByPositionNo(FindPositionNoFromIndex(i,j,params.Mirror), params.LineupPlayers).No)) }
							</button>
						} else {
							<button
								class="size-12 rounded-full text-center bg-secondary text-primary-background text-xl font-bold hover:bg-secondary-background"
								hx-get={ buttonHxGet(FindPositionNoFromIndex(i, j, params.Mirror), params, "add") }
								hx-swap="none"
							>
								+{ strconv.Itoa(FindPositionNoFromIndex(i, j, params.Mirror)) }
							</button>
						}
					}
				}
			</div>
		}
	</div>
}

func buttonHxGet(positionNo int, params AddLineupPlayerParams, cmp_type string) string {
	return "/cmps/lineup-players/form?type=" + cmp_type +
		"&lineup_id=" + strconv.Itoa(int(params.LineupID)) +
		"&position_no=" + strconv.Itoa(positionNo) +
		"&club_id=" + params.ClubID +
		"&mirror=" + strconv.FormatBool(params.Mirror)
}

func isPositionNoExist(positionNo int, lineupPlayers []queries.ListLineupPlayersByLineupIDRow) bool {
	for _, lineupPlayer := range lineupPlayers {
		if lineupPlayer.PositionNo == int16(positionNo) {
			return true
		}
	}
	return false
}

func FindLineupPlayerByPositionNo(positionNo int, lineupPlayers []queries.ListLineupPlayersByLineupIDRow) *queries.ListLineupPlayersByLineupIDRow {
	for _, lineupPlayer := range lineupPlayers {
		if lineupPlayer.PositionNo == int16(positionNo) {
			return &lineupPlayer
		}
	}
	return nil
}

func FindPositionNoFromIndex(i int, j int, mirror bool) int {
	if mirror {
		return (4-i)*10 + (4 - j)
	}
	return i*10 + j
}
