package match_components

import (
	"football-stat-goth/queries"
	"football-stat-goth/services/plformat"
	"strconv"
)

templ MatchResult(
	match queries.FindMatchByIDRow,
	events []queries.ListLineupEventsByMatchIDRow,
) {
	<section class="rounded-lg border border-primary shadow-lg w-full h-full p-4">
		<div class="text-lg text-center w-full font-semibold text-secondary mb-2">
			{ plformat.FormatTimestamp(match.StartAt.Time.Local()) } â€¢ { match.Location }
		</div>
		<div class="grid grid-cols-1 md:grid-cols-5 place-items-center w-full">
			<a
				href={ templ.SafeURL("/clubs/" + match.HomeClubID) }
				class="flex items-center space-x-4 col-span-2 justify-start w-full hover:underline"
			>
				<img src={ match.HomeClubLogo } class="size-20"/>
				<span class="font-bold text-2xl text-left w-full border-b-4 border-secondary-background">
					{ match.HomeClubName }
				</span>
			</a>
			<div class="w-full text-4xl text-center font-bold py-4 px-6 bg-gradient-to-br from-secondary-foreground to-secondary-background text-primary-background rounded-lg">
				{ strconv.Itoa(int(match.HomeGoals)) } - { strconv.Itoa(int(match.AwayGoals)) }
			</div>
			<a
				href={ templ.SafeURL("/clubs/" + match.AwayClubID) }
				class="flex items-center space-x-4 col-span-2 justify-end w-full hover:underline"
			>
				<span class="font-bold text-2xl text-right w-full border-b-4 border-secondary-background">
					{ match.AwayClubName }
				</span>
				<img src={ match.AwayClubLogo } class="size-20"/>
			</a>
		</div>
		<div class="grid grid-cols-3">
			<ul class="text-sm space-y-2 pb-4">
				for _, event := range(filterEventsByLineupID(match.HomeLineupID,queries.EventTypeGOAL, events)) {
					<li class="flex flex-col items-end">
						<span class="font-bold flex items-center">
							{ strconv.Itoa(int(event.Minutes)) }
							if event.Extra.Valid {
								+{ strconv.Itoa(int(event.Extra.Int16)) }
							}
							'
							<img src="/public/purple_football.webp" class="ml-1 size-3"/>
						</span>
						<span class="font-bold">
							({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
						</span>
						if event.PlayerId2.Valid {
							<span class="text-xs">
								<p class="font-semibold inline">
									{ event.P2Firstname.String } { event.P2Lastname.String } ({ strconv.Itoa(int(event.P2No.Int16)) })
								</p>&nbsp;- Assist
							</span>
						}
					</li>
				}
			</ul>
			<div class="flex flex-col items-center justify-end">
				<span class="text-xl text-center w-full font-bold text-secondary mt-4">
					{ match.Season }
				</span>
				<span class="text-2xl text-center w-full font-bold text-secondary">
					Matchweek { strconv.Itoa(int(match.Week)) }
				</span>
			</div>
			<ul class="text-sm space-y-2 pb-4">
				for _, event := range(filterEventsByLineupID(match.AwayLineupID,queries.EventTypeGOAL, events)) {
					<li class="flex flex-col items-start">
						<span class="font-bold flex items-center">
							<img src="/public/purple_football.webp" class="mr-1 size-3"/>
							{ strconv.Itoa(int(event.Minutes)) }
							if event.Extra.Valid {
								+{ strconv.Itoa(int(event.Extra.Int16)) }
							}
							'
						</span>
						<span class="font-bold">
							({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
						</span>
						if event.PlayerId2.Valid {
							<span class="text-xs">
								<p class="font-semibold inline">
									{ event.P2Firstname.String } { event.P2Lastname.String } ({ strconv.Itoa(int(event.P2No.Int16)) })
								</p>&nbsp;- Assist
							</span>
						}
					</li>
				}
			</ul>
		</div>
		if match.IsFinished {
			@statsComparison(match)
		}
	</section>
}

templ statsComparison(match queries.FindMatchByIDRow) {
	<div class="grid grid-cols-3 my-4 text-lg">
		<ul class="text-center space-y-4">
			<li>{ plformat.FormatPgTypeNumeric(match.HomePossession) }</li>
			<li>{ strconv.Itoa(int(match.HomeShotsOnTarget)) }</li>
			<li>{ strconv.Itoa(int(match.HomeShots)) }</li>
			<li>{ strconv.Itoa(int(match.HomeTouches)) }</li>
			<li>{ strconv.Itoa(int(match.HomePasses)) }</li>
			<li>{ strconv.Itoa(int(match.HomeTackles)) }</li>
			<li>{ strconv.Itoa(int(match.HomeClearances)) }</li>
			<li>{ strconv.Itoa(int(match.HomeCorners)) }</li>
			<li>{ strconv.Itoa(int(match.HomeOffsides)) }</li>
			<li>{ strconv.Itoa(int(match.HomeYellowCards)) }</li>
			<li>{ strconv.Itoa(int(match.HomeRedCards)) }</li>
			<li>{ strconv.Itoa(int(match.HomeFoulsConceded)) }</li>
		</ul>
		<ul class="text-center space-y-4 font-semibold">
			<li>Possession %</li>
			<li>Shots on target</li>
			<li>Shots</li>
			<li>Touches</li>
			<li>Passes</li>
			<li>Tackles</li>
			<li>Clearances</li>
			<li>Corners</li>
			<li>Offsides</li>
			<li>Yellow cards</li>
			<li>Red cards</li>
			<li>Fouls conceded</li>
		</ul>
		<ul class="text-center space-y-4">
			<li>{ plformat.FormatPgTypeNumeric(match.AwayPossession) }</li>
			<li>{ strconv.Itoa(int(match.AwayShotsOnTarget)) }</li>
			<li>{ strconv.Itoa(int(match.AwayShots)) }</li>
			<li>{ strconv.Itoa(int(match.AwayTouches)) }</li>
			<li>{ strconv.Itoa(int(match.AwayPasses)) }</li>
			<li>{ strconv.Itoa(int(match.AwayTackles)) }</li>
			<li>{ strconv.Itoa(int(match.AwayClearances)) }</li>
			<li>{ strconv.Itoa(int(match.AwayCorners)) }</li>
			<li>{ strconv.Itoa(int(match.AwayOffsides)) }</li>
			<li>{ strconv.Itoa(int(match.AwayYellowCards)) }</li>
			<li>{ strconv.Itoa(int(match.AwayRedCards)) }</li>
			<li>{ strconv.Itoa(int(match.AwayFoulsConceded)) }</li>
		</ul>
	</div>
}

func filterEventsByLineupID(
	lineup_id int32,
	event_type queries.EventType,
	events []queries.ListLineupEventsByMatchIDRow,
) []queries.ListLineupEventsByMatchIDRow {
	var filtered_events []queries.ListLineupEventsByMatchIDRow
	for _, event := range events {
		if event.LineupID == lineup_id && event.Event == event_type {
			filtered_events = append(filtered_events, event)
		}
	}
	return filtered_events
}
