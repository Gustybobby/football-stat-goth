package match_components

import (
	"football-stat-goth/queries"
	"football-stat-goth/services/plformat"
	"strconv"
)

templ MatchResult(
	match queries.FindMatchByIDRow,
	events []queries.ListLineupEventsByMatchIDRow,
) {
	<section class="rounded-lg border border-primary shadow-lg w-full h-full p-4">
		<div class="text-lg text-center w-full font-semibold text-secondary mb-2">
			{ plformat.FormatTimestamp(match.StartAt.Time.Local()) } â€¢ { match.Location }
		</div>
		<div class="grid grid-cols-1 md:grid-cols-5 place-items-center w-full">
			<a
				href={ templ.SafeURL("/clubs/" + match.HomeClubID) }
				class="flex items-center space-x-4 col-span-2 justify-start w-full hover:underline"
			>
				<img src={ match.HomeClubLogo } class="size-20"/>
				<span class="font-bold text-2xl text-left w-full border-b-4 border-secondary-background">
					{ match.HomeClubName }
				</span>
			</a>
			<div class="w-full text-4xl text-center font-bold py-4 px-6 bg-gradient-to-br from-secondary-foreground to-secondary-background text-primary-background rounded-lg">
				{ strconv.Itoa(int(match.HomeGoals)) } - { strconv.Itoa(int(match.AwayGoals)) }
			</div>
			<a
				href={ templ.SafeURL("/clubs/" + match.AwayClubID) }
				class="flex items-center space-x-4 col-span-2 justify-end w-full hover:underline"
			>
				<span class="font-bold text-2xl text-right w-full border-b-4 border-secondary-background">
					{ match.AwayClubName }
				</span>
				<img src={ match.AwayClubLogo } class="size-20"/>
			</a>
		</div>
		<div class="grid grid-cols-3">
			<ul class="text-sm space-y-2 pb-4">
				for _, event := range(filterGoalsByLineupID(match.HomeLineupID, events)) {
					<li class="flex flex-col items-end">
						<span class="font-bold flex items-center">
							{ strconv.Itoa(int(event.Minutes)) }
							if event.Extra.Valid {
								+{ strconv.Itoa(int(event.Extra.Int16)) }
							}
							'
							if event.Event == queries.EventTypeGOAL {
								<img src="/public/purple_football.webp" class="ml-1 size-3"/>
							} else {
								<img src="/public/red_football.webp" class="ml-1 size-3"/>
							}
						</span>
						<a
							class="font-bold hover:underline"
							href={ templ.SafeURL("/players/" + strconv.Itoa(int(event.PlayerId1.Int32))) }
						>
							({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
						</a>
						if event.PlayerId2.Valid {
							<span class="text-xs">
								<a
									class="font-semibold inline hover:underline"
									href={ templ.SafeURL("/players/" + strconv.Itoa(int(event.PlayerId2.Int32))) }
								>
									{ event.P2Firstname.String } { event.P2Lastname.String } ({ strconv.Itoa(int(event.P2No.Int16)) })
								</a>&nbsp;- Assist
							</span>
						}
					</li>
				}
			</ul>
			<div class="flex flex-col items-center justify-end">
				<span class="text-xl text-center w-full font-bold text-secondary mt-4">
					{ match.Season }
				</span>
				<span class="text-2xl text-center w-full font-bold text-secondary">
					Matchweek { strconv.Itoa(int(match.Week)) }
				</span>
			</div>
			<ul class="text-sm space-y-2 pb-4">
				for _, event := range(filterGoalsByLineupID(match.AwayLineupID, events)) {
					<li class="flex flex-col items-start">
						<span class="font-bold flex items-center">
							if event.Event == queries.EventTypeGOAL {
								<img src="/public/purple_football.webp" class="mr-1 size-3"/>
							} else {
								<img src="/public/red_football.webp" class="mr-1 size-3"/>
							}
							{ strconv.Itoa(int(event.Minutes)) }
							if event.Extra.Valid {
								+{ strconv.Itoa(int(event.Extra.Int16)) }
							}
							'
						</span>
						<a
							class="font-bold hover:underline"
							href={ templ.SafeURL("/players/" + strconv.Itoa(int(event.PlayerId1.Int32))) }
						>
							({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
						</a>
						if event.PlayerId2.Valid {
							<span class="text-xs">
								<a
									class="font-semibold inline hover:underline"
									href={ templ.SafeURL("/players/" + strconv.Itoa(int(event.PlayerId2.Int32))) }
								>
									{ event.P2Firstname.String } { event.P2Lastname.String } ({ strconv.Itoa(int(event.P2No.Int16)) })
								</a>&nbsp;- Assist
							</span>
						}
					</li>
				}
			</ul>
		</div>
		if match.IsFinished {
			@timeline(listEventsByMinutes(match.HomeLineupID, false, events), listEventsByMinutes(match.HomeLineupID, true, events))
			@statsComparison(match)
		}
	</section>
}

templ timeline(first_minute_events []MinuteEvent, second_minute_events []MinuteEvent) {
	<section class="flex justify-center p-4">
		<div class="flex items-center">
			<div class="mx-0.5 text-sm font-bold text-primary-background bg-secondary px-1 py-0.5 rounded-md">KO</div>
			@timelineHalf(first_minute_events, 0)
			<div class="mx-0.5 text-sm font-bold text-primary-background bg-secondary px-1 py-0.5 rounded-md">HT</div>
			@timelineHalf(second_minute_events, 100)
			<div class="mx-0.5 text-sm font-bold text-primary-background bg-secondary px-1 py-0.5 rounded-md">FT</div>
		</div>
	</section>
}

templ timelineHalf(minute_events []MinuteEvent, offset int) {
	for i, minute_event := range(minute_events) {
		<div id={ "timeline_" + strconv.Itoa(i+offset) } class="min-w-1.5">
			<ul class="h-16 flex flex-col justify-end text-sm">
				for _, home_event := range(minute_event.HomeEvents) {
					@timelineEventPin(home_event)
				}
			</ul>
			if minute_event.HomeEvents == nil && minute_event.AwayEvents == nil {
				<div class="flex items-center h-6"><div class="w-full border-b-2 border-secondary"></div></div>
			} else {
				<div class="px-0.5 text-xs font-bold text-secondary h-6 flex items-center justify-center">
					{ strconv.Itoa(minute_event.Minutes) }
					<p class="font-semibold inline">
						if minute_event.Extra > 0 {
							+{ strconv.Itoa(minute_event.Extra) }
						}
					</p>
				</div>
			}
			<ul class="h-16 text-sm">
				for _, away_event := range(minute_event.AwayEvents) {
					@timelineEventPin(away_event)
				}
			</ul>
		</div>
	}
}

templ timelineEventPin(event queries.ListLineupEventsByMatchIDRow) {
	<li class="flex items-center justify-center tooltip hover:cursor-pointer">
		if event.Event == queries.EventTypeYELLOW {
			ðŸŸ¨
		} else if event.Event == queries.EventTypeRED {
			ðŸŸ¥
		} else if event.Event == queries.EventTypeSUB {
			ðŸ—˜
		} else if event.Event == queries.EventTypeGOAL {
			<img src="/public/purple_football.webp" class="size-2.5"/>
		} else if event.Event == queries.EventTypeOWNGOAL {
			<img src="/public/red_football.webp" class="size-2.5"/>
		}
		<div class="tooltiptext -top-24 bg-white text-black p-3 rounded-lg border border-primary shadow-lg flex flex-col items-start text-sm w-64">
			if event.Event == queries.EventTypeGOAL {
				<h1 class="font-bold text-secondary text-base mb-1">
					{ strconv.Itoa(int(event.Minutes)) }
					if event.Extra.Valid {
						+{ strconv.Itoa(int(event.Extra.Int16)) }
					}
					' 
					<p class="font-semibold inline">Goal</p>
				</h1>
				<span class="text-left font-bold">
					({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
				</span>
				if event.PlayerId2.Valid {
					<span class="text-left font-semibold text-xs mt-1">
						({ strconv.Itoa(int(event.P2No.Int16)) }) { event.P2Firstname.String } { event.P2Lastname.String }&nbsp;
						<p class="font-normal inline">- Assist</p>
					</span>
				}
			} else if event.Event == queries.EventTypeOWNGOAL {
				<h1 class="font-bold text-secondary text-base mb-1">
					{ strconv.Itoa(int(event.Minutes)) }
					if event.Extra.Valid {
						+{ strconv.Itoa(int(event.Extra.Int16)) }
					}
					' 
					<p class="font-semibold inline">Own Goal</p>
				</h1>
				<span class="text-left font-bold">
					({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
				</span>
			} else if event.Event == queries.EventTypeYELLOW {
				<h1 class="font-bold text-secondary text-base mb-1">
					{ strconv.Itoa(int(event.Minutes)) }
					if event.Extra.Valid {
						+{ strconv.Itoa(int(event.Extra.Int16)) }
					}
					' 
					<p class="font-semibold inline">Yellow Card</p>
				</h1>
				<span class="text-left font-bold">
					({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
				</span>
			} else if event.Event == queries.EventTypeRED {
				<h1 class="font-bold text-secondary text-base mb-1">
					{ strconv.Itoa(int(event.Minutes)) }
					if event.Extra.Valid {
						+{ strconv.Itoa(int(event.Extra.Int16)) }
					}
					' 
					<p class="font-semibold inline">Red Card</p>
				</h1>
				<span class="text-left font-bold">
					({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
				</span>
			} else if event.Event == queries.EventTypeSUB {
				<h1 class="font-bold text-secondary text-base mb-1">
					{ strconv.Itoa(int(event.Minutes)) }
					if event.Extra.Valid {
						+{ strconv.Itoa(int(event.Extra.Int16)) }
					}
					' 
					<p class="font-semibold inline">Substitution</p>
				</h1>
				<span class="text-left font-bold mb-1">
					<p class="ml-1 mr-1.5 inline text-red-600">&#8598;</p> ({ strconv.Itoa(int(event.P1No.Int16)) }) { event.P1Firstname.String } { event.P1Lastname.String }
				</span>
				<span class="text-left font-bold">
					<p class="ml-1 mr-1.5 inline text-green-600">&#8600;</p> ({ strconv.Itoa(int(event.P2No.Int16)) }) { event.P2Firstname.String } { event.P2Lastname.String }&nbsp;
				</span>
			}
		</div>
	</li>
}

templ statsComparison(match queries.FindMatchByIDRow) {
	<div class="grid grid-cols-3 my-4 text-lg">
		<ul class="text-center space-y-4">
			<li>{ plformat.FormatPgTypeNumeric(match.HomePossession) }</li>
			<li>{ strconv.Itoa(int(match.HomeShotsOnTarget)) }</li>
			<li>{ strconv.Itoa(int(match.HomeShots)) }</li>
			<li>{ strconv.Itoa(int(match.HomeTouches)) }</li>
			<li>{ strconv.Itoa(int(match.HomePasses)) }</li>
			<li>{ strconv.Itoa(int(match.HomeTackles)) }</li>
			<li>{ strconv.Itoa(int(match.HomeClearances)) }</li>
			<li>{ strconv.Itoa(int(match.HomeCorners)) }</li>
			<li>{ strconv.Itoa(int(match.HomeOffsides)) }</li>
			<li>{ strconv.Itoa(int(match.HomeYellowCards)) }</li>
			<li>{ strconv.Itoa(int(match.HomeRedCards)) }</li>
			<li>{ strconv.Itoa(int(match.HomeFoulsConceded)) }</li>
		</ul>
		<ul class="text-center space-y-4 font-semibold">
			<li>Possession %</li>
			<li>Shots on target</li>
			<li>Shots</li>
			<li>Touches</li>
			<li>Passes</li>
			<li>Tackles</li>
			<li>Clearances</li>
			<li>Corners</li>
			<li>Offsides</li>
			<li>Yellow cards</li>
			<li>Red cards</li>
			<li>Fouls conceded</li>
		</ul>
		<ul class="text-center space-y-4">
			<li>{ plformat.FormatPgTypeNumeric(match.AwayPossession) }</li>
			<li>{ strconv.Itoa(int(match.AwayShotsOnTarget)) }</li>
			<li>{ strconv.Itoa(int(match.AwayShots)) }</li>
			<li>{ strconv.Itoa(int(match.AwayTouches)) }</li>
			<li>{ strconv.Itoa(int(match.AwayPasses)) }</li>
			<li>{ strconv.Itoa(int(match.AwayTackles)) }</li>
			<li>{ strconv.Itoa(int(match.AwayClearances)) }</li>
			<li>{ strconv.Itoa(int(match.AwayCorners)) }</li>
			<li>{ strconv.Itoa(int(match.AwayOffsides)) }</li>
			<li>{ strconv.Itoa(int(match.AwayYellowCards)) }</li>
			<li>{ strconv.Itoa(int(match.AwayRedCards)) }</li>
			<li>{ strconv.Itoa(int(match.AwayFoulsConceded)) }</li>
		</ul>
	</div>
}

func filterGoalsByLineupID(
	lineup_id int32,
	events []queries.ListLineupEventsByMatchIDRow,
) []queries.ListLineupEventsByMatchIDRow {
	var filtered_events []queries.ListLineupEventsByMatchIDRow
	for _, event := range events {
		if (event.LineupID == lineup_id && event.Event == queries.EventTypeGOAL) || (event.LineupID != lineup_id && event.Event == queries.EventTypeOWNGOAL) {
			filtered_events = append(filtered_events, event)
		}
	}
	return filtered_events
}

type MinuteEvent struct {
	Minutes    int
	Extra      int
	HomeEvents []queries.ListLineupEventsByMatchIDRow
	AwayEvents []queries.ListLineupEventsByMatchIDRow
}

func listEventsByMinutes(homeLineupID int32, afterHalf bool, events []queries.ListLineupEventsByMatchIDRow) []MinuteEvent {
	var minute_events []MinuteEvent

	min := 0
	end := 45
	if afterHalf {
		min = 45
		end = 90
	}

	extra := 1

	for _, event := range events {
		if (!afterHalf && event.AfterHalf) || (afterHalf && !event.AfterHalf) {
			continue
		}
		if event.Extra.Int16 == 0 {
			for i := 0; i < 90; i++ {
				if min > int(event.Minutes) {
					break
				}
				minute_events = append(minute_events, MinuteEvent{
					Minutes: min,
					Extra:   0,
				})
				min += 1
			}
		} else {
			for i := 0; i < 90; i++ {
				if extra > int(event.Extra.Int16) {
					break
				}
				minute_events = append(minute_events, MinuteEvent{
					Minutes: end,
					Extra:   extra,
				})
				extra += 1
			}
		}
		if event.LineupID == homeLineupID {
			minute_events[len(minute_events)-1].HomeEvents = append(minute_events[len(minute_events)-1].HomeEvents, event)
		} else {
			minute_events[len(minute_events)-1].AwayEvents = append(minute_events[len(minute_events)-1].AwayEvents, event)
		}
	}

	for min = min; min < end-5; min++ {
		minute_events = append(minute_events, MinuteEvent{
			Minutes: min,
			Extra:   0,
		})
	}

	return minute_events
}
