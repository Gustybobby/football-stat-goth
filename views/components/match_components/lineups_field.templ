package match_components

import (
	"football-stat-goth/queries"
	"strconv"
)

templ LineupsField(
	match queries.FindMatchByIDRow,
	homeLineupPlayers []queries.ListLineupPlayersByLineupIDRow,
	awayLineupPlayers []queries.ListLineupPlayersByLineupIDRow,
) {
	<section
		class="rounded-lg border border-primary shadow-lg w-full"
		id={ "lineups_field_" + strconv.Itoa(int(match.ID)) }
		hx-swap-oob={ "#" + "lineups_field_" + strconv.Itoa(int(match.ID)) }
	>
		<h1 class="pt-4 font-bold text-xl flex items-center justify-center space-x-2">
			<img src={ match.HomeClubLogo } class="size-12"/>
			<span>{ match.HomeClubName }</span>
		</h1>
		<div class="w-full relative h-[726px] motion-preset-slide-down-sm">
			<img src="/public/1-1-football-pitch.png" class="absolute w-full h-full"/>
			<div class="p-4 relative z-20 h-full flex flex-col items-center w-full">
				<div class="flex flex-col items-center h-[230px] w-full justify-around mt-10">
					for _, posLineupPlayers := range(listLineupPlayersByPositionNo(homeLineupPlayers, false)) {
						<div class="flex items-center justify-center space-x-12">
							for _, lineupPlayer := range(posLineupPlayers) {
								@PositionPin(int(lineupPlayer.No), lineupPlayer.Firstname, lineupPlayer.Lastname, string(lineupPlayer.Position), lineupPlayer.Image.String, false)
							}
						</div>
					}
				</div>
				<div class="flex flex-col items-center h-[352px] w-full justify-around">
					for _, posLineupPlayers := range(listLineupPlayersByPositionNo(awayLineupPlayers, true)) {
						<div class="flex items-center justify-center space-x-12">
							for _, lineupPlayer := range(posLineupPlayers) {
								@PositionPin(int(lineupPlayer.No), lineupPlayer.Firstname, lineupPlayer.Lastname, string(lineupPlayer.Position), lineupPlayer.Image.String, true)
							}
						</div>
					}
				</div>
			</div>
		</div>
		<h1 class="pb-4 font-bold text-xl flex items-center justify-center space-x-2">
			<img src={ match.AwayClubLogo } class="size-12"/>
			<span>{ match.AwayClubName }</span>
		</h1>
	</section>
}

func listLineupPlayersByPositionNo(
	lineupPlayers []queries.ListLineupPlayersByLineupIDRow,
	mirror bool,
) [][]queries.ListLineupPlayersByLineupIDRow {
	var lineupPlayersArr [][]queries.ListLineupPlayersByLineupIDRow
	for i := range 5 {
		var players []queries.ListLineupPlayersByLineupIDRow
		for j := range 5 {
			for _, lineupPlayer := range lineupPlayers {
				if lineupPlayer.PositionNo == int16(findPositionNoFromIndex(i, j, mirror)) {
					players = append(players, lineupPlayer)
					break
				}
			}
		}
		if len(players) > 0 {
			lineupPlayersArr = append(lineupPlayersArr, players)
		}
	}
	return lineupPlayersArr
}

func findLineupPlayerByPositionNo(positionNo int, lineupPlayers []queries.ListLineupPlayersByLineupIDRow) *queries.ListLineupPlayersByLineupIDRow {
	for _, lineupPlayer := range lineupPlayers {
		if lineupPlayer.PositionNo == int16(positionNo) {
			return &lineupPlayer
		}
	}
	return nil
}

func findPositionNoFromIndex(i int, j int, mirror bool) int {
	if mirror {
		return (4-i)*10 + (4 - j)
	}
	return i*10 + j
}
