package match_components

import (
	"football-stat-goth/queries"
	"strconv"
	"strings"
)

templ LineupsField(
	match queries.FindMatchByIDRow,
	events []queries.ListLineupEventsByMatchIDRow,
	homeLineupPlayers []queries.ListLineupPlayersByLineupIDRow,
	awayLineupPlayers []queries.ListLineupPlayersByLineupIDRow,
) {
	<section
		class="rounded-lg border border-primary shadow-lg w-full h-full flex flex-col justify-center items-center"
		id={ "lineups_field_" + strconv.Itoa(int(match.ID)) }
		hx-swap-oob={ "#" + "lineups_field_" + strconv.Itoa(int(match.ID)) }
	>
		<h1 class="mt-4 font-bold text-xl flex items-center justify-center space-x-2">
			<img src={ match.HomeClubLogo } class="size-12"/>
			<span>{ match.HomeClubName }</span>
		</h1>
		<div class="w-full relative h-[726px] motion-preset-slide-down-sm">
			<img src="/public/1-1-football-pitch.webp" class="absolute w-full h-full"/>
			<div class="p-4 relative z-20 h-full flex flex-col items-center w-full">
				<div class="flex flex-col items-center h-[230px] w-full justify-around mt-10">
					for _, posLineupPlayers := range(listLineupPlayersByPositionNo(homeLineupPlayers, false)) {
						<div class="flex items-center justify-center space-x-12">
							for _, lineupPlayer := range(posLineupPlayers) {
								@PositionPin(lineupPlayer, events, false)
							}
						</div>
					}
				</div>
				<div class="flex flex-col items-center h-[352px] w-full justify-around">
					for _, posLineupPlayers := range(listLineupPlayersByPositionNo(awayLineupPlayers, true)) {
						<div class="flex items-center justify-center space-x-12">
							for _, lineupPlayer := range(posLineupPlayers) {
								@PositionPin(lineupPlayer, events, true)
							}
						</div>
					}
				</div>
			</div>
		</div>
		<h1 class="mb-4 font-bold text-xl flex items-center justify-center space-x-2">
			<img src={ match.AwayClubLogo } class="size-12"/>
			<span>{ match.AwayClubName }</span>
		</h1>
	</section>
}

func listLineupPlayersByPositionNo(
	lineupPlayers []queries.ListLineupPlayersByLineupIDRow,
	mirror bool,
) [][]queries.ListLineupPlayersByLineupIDRow {
	var lineupPlayersArr [][]queries.ListLineupPlayersByLineupIDRow
	for i := range 5 {
		var players []queries.ListLineupPlayersByLineupIDRow
		for j := range 5 {
			for _, lineupPlayer := range lineupPlayers {
				if lineupPlayer.PositionNo == int16(findPositionNoFromIndex(i, j, mirror)) {
					players = append(players, lineupPlayer)
					break
				}
			}
		}
		if len(players) > 0 {
			lineupPlayersArr = append(lineupPlayersArr, players)
		}
	}
	return lineupPlayersArr
}

func findLineupPlayerByPositionNo(positionNo int, lineupPlayers []queries.ListLineupPlayersByLineupIDRow) *queries.ListLineupPlayersByLineupIDRow {
	for _, lineupPlayer := range lineupPlayers {
		if lineupPlayer.PositionNo == int16(positionNo) {
			return &lineupPlayer
		}
	}
	return nil
}

func findPositionNoFromIndex(i int, j int, mirror bool) int {
	if mirror {
		return (4-i)*10 + (4 - j)
	}
	return i*10 + j
}

templ PositionPin(
	lineupPlayer queries.ListLineupPlayersByLineupIDRow,
	events []queries.ListLineupEventsByMatchIDRow,
	light bool,
) {
	<div
		class={ "size-10 text-white font-bold rounded-full flex items-center justify-center text-center shadow-lg tooltip hover:scale-110 transition-transform cursor-pointer " + pinVariant(light) }
	>
		{ strconv.Itoa(int(lineupPlayer.No)) }
		<div class="tooltiptext -top-[6.5rem] bg-white text-black p-2 rounded-lg border border-primary shadow-lg w-56 h-fit flex items-center space-x-2 text-sm">
			<img
				src={ lineupPlayer.Image.String }
				class="size-16"
				onerror="this.src='/public/missing_portrait.png';"
			/>
			<div class="flex flex-col items-start">
				<div class="flex items-center space-x-1">
					for _, event := range(FilterEventsByPlayerID(lineupPlayer.PlayerID,queries.EventTypeSUB, events)) {
						@SubstituteEventCard(lineupPlayer, event)
					}
				</div>
				<a href={ templ.SafeURL("/players/" + strconv.Itoa(int(lineupPlayer.No))) } class="hover:underline text-left">
					<span class="text-left">
						({ strconv.Itoa(int(lineupPlayer.No)) }) { lineupPlayer.Firstname } { lineupPlayer.Lastname }
					</span>
				</a>
				<span>
					if string(lineupPlayer.Position) == "GK" {
						Goalkeeper
					} else if string(lineupPlayer.Position) == "DEF" {
						Defender
					} else if string(lineupPlayer.Position) == "MFD" {
						Midfielder
					} else if string(lineupPlayer.Position) == "FWD" {
						Forward
					}
				</span>
				<span class="flex items-center mt-1">
					for _, event := range(FilterEventsByPlayerID(lineupPlayer.PlayerID,queries.EventTypeGOAL, events)) {
						if event.PlayerId1.Int32 == lineupPlayer.PlayerID {
							<img src="/public/purple_football.webp" class="size-3 mr-0.5"/>
						}
					}
					{ strings.Repeat("ðŸŸ¨", len(FilterEventsByPlayerID(lineupPlayer.PlayerID,queries.EventTypeYELLOW, events))) }
					{ strings.Repeat("ðŸŸ¥", len(FilterEventsByPlayerID(lineupPlayer.PlayerID,queries.EventTypeRED, events))) }
				</span>
			</div>
		</div>
	</div>
}

func pinVariant(light bool) string {
	if light {
		return "bg-secondary-foreground"
	}
	return "bg-secondary-background"
}
