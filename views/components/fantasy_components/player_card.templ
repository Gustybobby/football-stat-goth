package fantasy_components

import (
	"football-stat-goth/queries"
	"football-stat-goth/views/components"
	"strconv"
)

templ PlayerCard() {
	<img class="h-full w-full" src="/public/playerCard.webp"/>
}

templ BlankPlayerCard(position queries.PlayerPosition) {
	<img class="h-full w-full hover:cursor-pointer" src="/public/blank-playerCard.webp" blank="true" pos={ string(position) }/>
}

templ PlayerCardImg(player queries.ListFantasyPlayersRow, is_small bool) {
	<div class={ playerCardVariant(is_small) }>
		@PlayerCard()
		<span class="absolute inset-0 p-4 translate-y-6 size-full justify-center">
			<img src={ player.Image.String } onerror=" this.src = '/public/blank-player.webp'"/>
		</span>
		<span class="absolute inset-0 p-4 size-full flex flex-col items-center">
			<p class="text-primary-foreground font-bold player-name">{ player.Lastname }</p>
			<p class="hidden player-club">{ player.ClubID } </p>
		</span>
	</div>
}

templ PlayerCardInfo(player queries.ListFantasyPlayersRow) {
	<div class="relative size-full hover:cursor-pointer">
		@PlayerCard()
		<span class="absolute inset-0 size-full align-text-top text-center p-4 translate-y-1">
			<p class="text-primary-foreground font-bold">{ player.Lastname }</p>
			<p class="font-semibold player-pos">{ string(player.Position) }</p>
			<p class="font-semibold player-cost">Cost: { strconv.Itoa(int(player.Cost)) }</p>
		</span>
	</div>
}

templ PlayerCardDetails(player queries.ListFantasyPlayersRow, is_owned bool, bought_cost int32, buyable bool) {
	@components.BaseCard("Player Details") {
		<div class="p-2 flex justify-between">
			<div class="flex space-x-4">
				<div class="w-32 h-40 text-center">
					@PlayerCardImg(player, false)
				</div>
				<div class="p-4 flex flex-col space-y-1">
					<a href={ templ.SafeURL("/players/" + strconv.Itoa(int(player.PlayerID))) } class="hover:underline">
						<h1 class="font-semibold text-3xl space-x-1 flex">
							<p>{ player.Firstname }</p>
							<p class="font-bold">
								{ player.Lastname }
							</p>
						</h1>
					</a>
					<span class="font-bold text-xl">Cost: { strconv.Itoa(int(player.Cost)) }</span>
					if is_owned {
						<span class="font-bold text-xl">Bought Cost: { strconv.Itoa(int(bought_cost)) }</span>
						if bought_cost > player.Cost {
							<span class="font-bold text-xl text-red-600">
								{ strconv.FormatFloat((float64(player.Cost) - float64(bought_cost))/float64(bought_cost)*100, 'f',2,32) }%
							</span>
						} else if bought_cost == player.Cost {
							<span class="font-bold text-xl">
								{ strconv.FormatFloat((float64(player.Cost) - float64(bought_cost))/float64(bought_cost)*100, 'f',2,32) }%
							</span>
						} else {
							<span class="font-bold text-xl text-green-600">
								+{ strconv.FormatFloat((float64(player.Cost) - float64(bought_cost))/float64(bought_cost)*100, 'f',2,32) }%
							</span>
						}
					}
				</div>
			</div>
			if is_owned {
				<div class="flex items-end justify-end">
					<button
						hx-delete={ "/api/fantasy/players/" + strconv.Itoa(int(player.ID)) }
						class="bg-red-600 text-primary-background px-8 py-4 rounded-lg hover:bg-red-500 font-semibold text-2xl"
					>
						Sell
					</button>
				</div>
			}
			if buyable {
				<div class="flex items-end justify-end">
					<button
						hx-post={ "/api/fantasy/players/" + strconv.Itoa(int(player.ID)) }
						class="bg-green-600 text-primary-background px-8 py-4 rounded-lg hover:bg-green-500 font-semibold text-2xl"
					>
						Buy
					</button>
				</div>
			}
		</div>
	}
}

func playerCardVariant(is_small bool) string {
	base_class := "relative size-full hover:cursor-pointer"
	if is_small {
		base_class += " text-xs"
	}
	return base_class
}
